//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "zone")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  #[serde(with = "time::serde::iso8601")]
  pub created: TimeDateTimeWithTimeZone,
  #[serde(with = "time::serde::iso8601")]
  pub updated: TimeDateTimeWithTimeZone,
  pub name: String,
  pub owner: Uuid,
  pub verified: bool,
  pub serial: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::record::Entity")]
  Record,
  #[sea_orm(
    belongs_to = "super::user::Entity",
    from = "Column::Owner",
    to = "super::user::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  User,
}

impl Related<super::record::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Record.def()
  }
}

impl Related<super::user::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::User.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
