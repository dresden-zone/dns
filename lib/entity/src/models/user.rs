//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  #[serde(with = "time::serde::iso8601")]
  pub created: TimeDateTimeWithTimeZone,
  #[serde(with = "time::serde::iso8601")]
  pub updated: TimeDateTimeWithTimeZone,
  #[sea_orm(unique)]
  pub name: String,
  #[sea_orm(unique)]
  pub email: String,
  pub email_verified: bool,
  pub display_name: String,
  pub roles: i16,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::password::Entity")]
  Password,
  #[sea_orm(has_many = "super::zone::Entity")]
  Zone,
}

impl Related<super::password::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Password.def()
  }
}

impl Related<super::zone::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Zone.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
