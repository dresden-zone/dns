//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.3

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "record")]
pub struct Model {
  #[sea_orm(primary_key, auto_increment = false)]
  pub id: Uuid,
  pub created: TimeDateTimeWithTimeZone,
  pub updated: TimeDateTimeWithTimeZone,
  pub name: String,
  pub zone_id: Uuid,
  pub ttl: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
  #[sea_orm(has_many = "super::record_a::Entity")]
  RecordA,
  #[sea_orm(has_many = "super::record_aaaa::Entity")]
  RecordAaaa,
  #[sea_orm(has_many = "super::record_cname::Entity")]
  RecordCname,
  #[sea_orm(has_many = "super::record_mx::Entity")]
  RecordMx,
  #[sea_orm(has_many = "super::record_ns::Entity")]
  RecordNs,
  #[sea_orm(has_many = "super::record_txt::Entity")]
  RecordTxt,
  #[sea_orm(
    belongs_to = "super::zone::Entity",
    from = "Column::ZoneId",
    to = "super::zone::Column::Id",
    on_update = "NoAction",
    on_delete = "NoAction"
  )]
  Zone,
}

impl Related<super::record_a::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RecordA.def()
  }
}

impl Related<super::record_aaaa::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RecordAaaa.def()
  }
}

impl Related<super::record_cname::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RecordCname.def()
  }
}

impl Related<super::record_mx::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RecordMx.def()
  }
}

impl Related<super::record_ns::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RecordNs.def()
  }
}

impl Related<super::record_txt::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::RecordTxt.def()
  }
}

impl Related<super::zone::Entity> for Entity {
  fn to() -> RelationDef {
    Relation::Zone.def()
  }
}

impl ActiveModelBehavior for ActiveModel {}
